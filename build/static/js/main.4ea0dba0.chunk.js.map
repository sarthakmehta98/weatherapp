{"version":3,"sources":["mist.mp4","Lightning.mp4","clouds.mp4","rainy.mp4","snowy.mp4","haze.mp4","clearsky.mov","App.js","Component/FrontAnimations.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","React","Component","App","props","getWeather","e","a","preventDefault","city","state","country","fetch","api_call","json","data","setState","temperature","main","temp","name","sys","humidity","description","weather","FrontA","error","iconsunshower","cloud","sun","rays","iconthunderstorm","rain","lightning","bolt","iconcloudy","iconflurries","snow","flake","iconsunny","iconrainy","VideoIsOn","undefined","str","includes","document","getElementById","src","cloudy","Lightning","snowy","mist","clearsky","haze","handleCityChange","bind","handleCountryChange","event","this","target","value","window","onload","timeBack","className","id","autoPlay","loop","muted","type","class","href","rel","onChange","onClick","Boolean","location","hostname","match","Index","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ea0dba0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mist.878d4b50.mp4\";","module.exports = __webpack_public_path__ + \"static/media/Lightning.4a1a807b.mp4\";","module.exports = __webpack_public_path__ + \"static/media/clouds.b84f44dc.mp4\";","module.exports = __webpack_public_path__ + \"static/media/rainy.8647f42c.mp4\";","module.exports = __webpack_public_path__ + \"static/media/snowy.9797e406.mp4\";","module.exports = __webpack_public_path__ + \"static/media/haze.74ee9c99.mp4\";","module.exports = __webpack_public_path__ + \"static/media/clearsky.fe2ddaa2.mov\";","import React from 'react';\nimport './App.css';\nimport Lightning from './Lightning.mp4'\nimport cloudy from './clouds.mp4'\nimport rain from './rainy.mp4'\nimport snowy from './snowy.mp4'\nimport mist from './mist.mp4'\nimport haze from './haze.mp4'\nimport clearsky from './clearsky.mov'\nimport FrontAnimations from './Component/FrontAnimations'\n\nconst API_KEY = \"94dbaa5cedc23401e9c6d96681166f49\";\n\nclass App extends React.Component\n{\n  constructor(props)\n  {\n    super(props)\n    this.state = {\n      FrontA: \"off\",\n      VideoIsOn: \"VideoIsOff\",\n      \n      weather: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined,\n      temperature: undefined,\n      iconsunshower: \"icon sun-shower\",\n      cloud: \"cloud\",\n      sun: \"sun\",\n      rays: \"rays\",\n      iconthunderstorm: \"icon thunder-strorm\",\n      rain: \"rain\",\n      lightning: \"lightning\",\n      bolt: \"bolt\",\n      iconcloudy: \"icon cloudy\",\n      iconflurries: \"icon flurries\",\n      snow: \"snow\",\n      flake: \"flake\",\n      iconsunny: \"icon sunny\",\n      iconrainy: \"icon rainy\",\n\n\n    }\n    \n    this.handleCityChange = this.handleCityChange.bind(this);\n    this.handleCountryChange = this.handleCountryChange.bind(this);\n    //this.timeBack = this.timeBack.bind(this);\n  }\n\n  // timeBack() \n  // {\n  //   const currentHours = new Date().getHours();\n\n  //   //const currentHours = 5\n    \n  //   console.log(currentHours);\n  //   if(currentHours >= 6 && currentHours<20)\n  //   {\n  //     document.getElementById(\"imageBackground\").src = morning\n  //   }\n\n  //   if(currentHours >= 20 || currentHours<6)\n  //   {\n  //     document.getElementById(\"imageBackground\").src = night\n  //     console.log(\"it is night\");\n  //   }\n    \n  // }\n\n\n  getWeather = async (e) => {\n\n    e.preventDefault(); \n    const city = this.state.city;\n    const country = this.state.country;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    //console.log(data);\n\n    \n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        FrontA: \"on\",\n        error: \"\",\n        iconsunshower: \"undefined\",\n      cloud: \"undefined\",\n      sun: \"undefined\",\n      rays: \"undefined\",\n      iconthunderstorm: \"undefined\",\n      rain: \"undefined\",\n      lightning: \"undefined\",\n      bolt: \"undefined\",\n      iconcloudy: \"undefined\",\n      iconflurries: \"undefined\",\n      snow: \"undefined\",\n      flake: \"undefined\",\n      iconsunny: \"undefined\",\n      iconrainy: \"undefined\",\n      VideoIsOn: \"VideoIsOn\",\n\n      });\n      \n    } \n    \n    else {\n\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values.\",\n      });\n    }\n\n    var str = this.state.description;\n\n    if(str.includes(\"rain\"))\n    {\n      document.getElementById(\"video\").src = rain;\n    }\n\n    if(str.includes(\"clouds\"))\n    {\n      document.getElementById(\"video\").src = cloudy;\n    }\n   \n    if(str.includes(\"thunderstorm\"))\n    {\n      document.getElementById(\"video\").src = Lightning;\n    }\n\n\n    if(str.includes(\"snow\"))\n    {\n      document.getElementById(\"video\").src = snowy;\n    }\n\n\n    if(str.includes(\"mist\"))\n    {\n      document.getElementById(\"video\").src = mist;\n    }\n\n    if(str.includes(\"fog\"))\n    {\n      document.getElementById(\"video\").src = mist;\n    }\n\n    if(str.includes(\"smoke\"))\n    {\n      document.getElementById(\"video\").src = mist;\n    }\n    \n   \n    if(str.includes(\"clear sky\"))\n    {\n      document.getElementById(\"video\").src = clearsky;\n    }\n\n\n    if(str.includes(\"haze\"))\n    {\n      document.getElementById(\"video\").src = haze;\n    }\n    \n\n    \n\n \n  }\n  \n  \n  handleCityChange(event)\n  {\n    this.setState({city: event.target.value})\n\n  }\n\n  handleCountryChange(event)\n  {\n    this.setState({country: event.target.value})\n  }\n  \n  // updateBckground(event)\n  // {\n  //   const currentHours = new Date().getHours();\n  //   console.log(currentHours);\n    \n  //   if(currentHours>=17 && currentHours<=5)\n  //   {\n  //     document.getElementById(\"ImageBackground\").src = morning;\n  //     var x  = document.getElementById(\"ImageBackground\").src;\n  //     console.log(x);\n  //   }\n  // }\n  render()\n  {\n    window.onload = this.timeBack;\n  \n    return (\n\n      <body className={this.state.VideoIsOn}>\n\n\n\n      <div className=\"container\">  \n\n      \n      \n      <video id=\"video\" autoPlay=\"true\" loop=\"true\" muted=\"true\">\n  \n          <source src={this.state.weather} type=\"video/mp4\" />\n  \n      </video>\n      <div>\n\n\n\n        \n      </div>\n       \n    \n  \n      <div class=\"overlay\">\n\n          <form >\n          <h2>REACT WEATHER APP</h2>\n              <div className=\"aboveSubmit\">\n                <link href=\"https://fonts.googleapis.com/css?family=Indie+Flower&display=swap\" rel=\"stylesheet\"/>\n              <span>City</span>\n              <input type=\"text\" value={this.state.city} onChange={this.handleCityChange} ></input>\n              <span>Country</span>\n              <input type=\"text\" value={this.state.country} onChange={this.handleCountryChange}></input>\n              </div>\n              <button type=\"submit\" onClick={this.getWeather}>Submit</button>\n              \n          </form>\n\n\n          <div>\n{\t\n  this.state.city && this.state.country && <p className=\"weather__key\"> Location: \n    <span className=\"weather__value\"> { this.state.city }, { this.state.country }</span>\n  </p> \n}\n{ \t\n  this.state.temperature && <p className=\"weather__key\"> Temperature: \n    <span className=\"weather__value\"> { this.state.temperature }\t</span>\n  </p> \n}\n{ \t\n  this.state.humidity && <p className=\"weather__key\"> Humidity: \n    <span className=\"weather__value\"> { this.state.humidity } </span>\n  </p> \n}\n{ \t\n  this.state.description && <p className=\"weather__key\"> Conditions: \n    <span className=\"weather__value\"> { this.state.description } </span>\n</p> \n}\n{ \n  this.state.error && <p className=\"weather__error\">{ this.state.error }</p>  \n}\n\n          </div>\n  \n      </div>\n  \n\n\n      <div id={this.state.FrontA}> \n                        <div className={this.state.iconsunshower}>\n                        <div className={this.state.cloud}></div>\n                        <div className={this.state.cloud}>\n                            <div className={this.state.rays}></div>\n                        </div>\n                        <div className={this.state.rain}></div>\n                        </div>\n                        \n                        <div className={this.state.iconthunderstorm}>\n                        <div className={this.state.cloud}></div>\n                        <div className={this.state.lightning}>\n                            <div className={this.state.bolt}></div>\n                            <div className={this.state.bolt}></div>\n                        </div>\n                        </div>\n                        \n                        <div className={this.state.iconcloudy}>\n                        <div className={this.state.cloud}></div>\n                        <div className={this.state.cloud}></div>\n                        </div>\n                        \n                        <div className={this.state.iconflurries}>\n                        <div className={this.state.cloud}></div>\n                        <div className={this.state.snow}>\n                            <div className={this.state.flake}></div>\n                            <div className={this.state.flake}></div>\n                        </div>\n                        </div>\n                        \n                        <div className={this.state.iconsunny}>\n                        <div className={this.state.sun}>\n                            <div className={this.state.rays}></div>\n                        </div>\n                        </div>\n                        \n                        <div className={this.state.iconrainy}>\n                        <div className={this.state.cloud}></div>\n                        <div className={this.state.rain}></div>\n                        </div>\n    </div>\n\n      </div>\n\n\n      </body>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './FrontAnimations.css'\n\nclass FrontAnimations extends React.Component{\nrender(){\n    return(\n\n       <div className=\"FrontA\"> \n                        <div class=\"icon sun-shower\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"sun\">\n                            <div class=\"rays\"></div>\n                        </div>\n                        <div class=\"rain\"></div>\n                        </div>\n                        \n                        <div class=\"icon thunder-storm\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"lightning\">\n                            <div class=\"bolt\"></div>\n                            <div class=\"bolt\"></div>\n                        </div>\n                        </div>\n                        \n                        <div class=\"icon cloudy\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"cloud\"></div>\n                        </div>\n                        \n                        <div class=\"icon flurries\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"snow\">\n                            <div class=\"flake\"></div>\n                            <div class=\"flake\"></div>\n                        </div>\n                        </div>\n                        \n                        <div class=\"icon sunny\">\n                        <div class=\"sun\">\n                            <div class=\"rays\"></div>\n                        </div>\n                        </div>\n                        \n                        <div class=\"icon rainy\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"rain\"></div>\n                        </div>\n    </div>\n    );\n}\n}\n\nexport default FrontAnimations;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nclass Index extends React.Component{\n    render()\n    {\n        return(\n            <div>\n                <App/>\n                \n            </div>\n        );\n    }\n}\n\nReactDOM.render(<Index/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}