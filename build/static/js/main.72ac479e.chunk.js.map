{"version":3,"sources":["Lightning.mp4","windy.mp4","clouds.mp4","rainy.mp4","snowy.mp4","haze.mp4","undefined.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","App","props","getWeather","e","a","preventDefault","city","state","country","fetch","api_call","json","data","setState","temperature","main","temp","name","sys","humidity","description","weather","error","console","log","undefined","changeVal","windy","handleCityChange","bind","handleCountryChange","event","this","target","value","className","id","autoPlay","loop","muted","src","type","class","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,uC,qBCA3CD,EAAOC,QAAU,IAA0B,mC,4FCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,mMCUrCC,G,YAAU,oCAkJDC,E,YA9Ib,WAAYC,GACX,IAAD,8BACE,4CAAMA,KAmBRC,WApBA,uCAoBa,WAAOC,GAAP,qBAAAC,EAAA,6DAEXD,EAAEE,iBACIC,EAAO,EAAKC,MAAMD,KAClBE,EAAU,EAAKD,MAAMC,QAJhB,SAKYC,MAAM,oDAAD,OAAqDH,EAArD,YAA6DE,EAA7D,kBAA8ET,EAA9E,kBALjB,cAKLW,EALK,gBAMQA,EAASC,OANjB,OAMLC,EANK,OAUPN,GAAQE,GACV,EAAKK,SAAS,CACZC,YAAaF,EAAKG,KAAKC,KACvBV,KAAMM,EAAKK,KACXT,QAASI,EAAKM,IAAIV,QAClBW,SAAUP,EAAKG,KAAKI,SACpBC,YAAaR,EAAKS,QAAQ,GAAGD,YAE7BE,MAAO,KAETC,QAAQC,IAAI,EAAKjB,MAAMc,UAKvB,EAAKR,SAAS,CACZC,iBAAaW,EACbnB,UAAMmB,EACNjB,aAASiB,EACTN,cAAUM,EACVL,iBAAaK,EACbH,MAAO,6BAIX,EAAKI,UAAUvB,GAnCJ,4CApBb,sDAEE,EAAKI,MAAQ,CACXc,QAASM,IACTrB,UAAMmB,EACNjB,aAASiB,EACTN,cAAUM,EACVL,iBAAaK,EACbH,WAAOG,EACPX,iBAAaW,GAGf,EAAKG,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,oBAAsB,EAAKA,oBAAoBD,KAAzB,gBAb7B,E,8EA6DiBE,GAEfC,KAAKnB,SAAS,CAACP,KAAMyB,EAAME,OAAOC,U,0CAIhBH,GAElBC,KAAKnB,SAAS,CAACL,QAASuB,EAAME,OAAOC,U,+BAQrC,OAIE,yBAAKC,UAAU,aAGf,2BAAOC,GAAG,QAAQC,SAAS,OAAOC,KAAK,OAAOC,MAAM,QAEhD,4BAAQC,IAAKR,KAAKzB,MAAMc,QAASoB,KAAK,eAI1C,yBAAKC,MAAM,WAEP,8BACA,iDACI,yBAAKP,UAAU,eACf,iDACA,2BAAOM,KAAK,OAAOP,MAAOF,KAAKzB,MAAMD,KAAMqC,SAAUX,KAAKJ,mBAC1D,oDACA,2BAAOa,KAAK,OAAOP,MAAOF,KAAKzB,MAAMC,QAASmC,SAAUX,KAAKF,uBAE7D,4BAAQW,KAAK,SAASG,QAASZ,KAAK9B,YAApC,WAKJ,6BAER8B,KAAKzB,MAAMD,MAAQ0B,KAAKzB,MAAMC,SAAW,uBAAG2B,UAAU,gBAAb,aACvC,0BAAMA,UAAU,kBAAhB,IAAoCH,KAAKzB,MAAMD,KAA/C,KAAyD0B,KAAKzB,MAAMC,UAItEwB,KAAKzB,MAAMO,aAAe,uBAAGqB,UAAU,gBAAb,gBACxB,0BAAMA,UAAU,kBAAhB,IAAoCH,KAAKzB,MAAMO,YAA/C,MAIFkB,KAAKzB,MAAMY,UAAY,uBAAGgB,UAAU,gBAAb,aACrB,0BAAMA,UAAU,kBAAhB,IAAoCH,KAAKzB,MAAMY,SAA/C,MAIFa,KAAKzB,MAAMa,aAAe,uBAAGe,UAAU,gBAAb,eACxB,0BAAMA,UAAU,kBAAhB,IAAoCH,KAAKzB,MAAMa,YAA/C,MAIFY,KAAKzB,MAAMe,OAAS,uBAAGa,UAAU,kBAAmBH,KAAKzB,MAAMe,c,GAlI/CuB,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.72ac479e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Lightning.dd2e2e54.mp4\";","module.exports = __webpack_public_path__ + \"static/media/windy.e9fa0e49.mp4\";","module.exports = __webpack_public_path__ + \"static/media/clouds.dc273ff7.mp4\";","module.exports = __webpack_public_path__ + \"static/media/rainy.7f784e94.mp4\";","module.exports = __webpack_public_path__ + \"static/media/snowy.605bfd4d.mp4\";","module.exports = __webpack_public_path__ + \"static/media/haze.0f3cec56.mp4\";","module.exports = __webpack_public_path__ + \"static/media/undefined.9be33ad5.jpeg\";","import React from 'react';\nimport './App.css';\nimport Lightning from './Lightning.mp4'\nimport cloudy from './clouds.mp4'\nimport rain from './rainy.mp4'\nimport snowy from './snowy.mp4'\nimport windy from './windy.mp4'\nimport haze from './haze.mp4'\nimport undefineds from './undefined.jpeg'\n\nconst API_KEY = \"94dbaa5cedc23401e9c6d96681166f49\";\n\nclass App extends React.Component\n{\n  constructor(props)\n  {\n    super(props)\n    this.state = {\n      weather: windy,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined,\n      temperature: undefined\n    }\n    \n    this.handleCityChange = this.handleCityChange.bind(this);\n    this.handleCountryChange = this.handleCountryChange.bind(this);\n    \n\n\n  }\n  \n\n  getWeather = async (e) => {\n\n    e.preventDefault(); \n    const city = this.state.city;\n    const country = this.state.country;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    //console.log(data);\n\n    \n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        \n        error: \"\"\n      });\n      console.log(this.state.weather)\n    } \n    \n    else {\n\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values.\"\n      });\n    }\n \n    this.changeVal(e);\n \n  }\n\n  \n  \n  handleCityChange(event)\n  {\n    this.setState({city: event.target.value})\n\n  }\n\n  handleCountryChange(event)\n  {\n    this.setState({country: event.target.value})\n  }\n\n\n  render()\n  {\n    \n\n    return (\n\n      \n\n      <div className=\"container\" >\n\n        \n      <video id=\"video\" autoPlay=\"true\" loop=\"true\" muted=\"true\">\n  \n          <source src={this.state.weather} type=\"video/mp4\" />\n  \n      </video>\n  \n      <div class=\"overlay\">\n\n          <form>\n          <h2>REACT WEATHER APP</h2>\n              <div className=\"aboveSubmit\">\n              <span>Enter city name</span>\n              <input type=\"text\" value={this.state.city} onChange={this.handleCityChange}></input>\n              <span>Enter country name</span>\n              <input type=\"text\" value={this.state.country} onChange={this.handleCountryChange}></input>\n              </div>\n              <button type=\"submit\" onClick={this.getWeather}>Submit</button>\n              \n          </form>\n\n\n          <div>\n{\t\n  this.state.city && this.state.country && <p className=\"weather__key\"> Location: \n    <span className=\"weather__value\"> { this.state.city }, { this.state.country }</span>\n  </p> \n}\n{ \t\n  this.state.temperature && <p className=\"weather__key\"> Temperature: \n    <span className=\"weather__value\"> { this.state.temperature }\t</span>\n  </p> \n}\n{ \t\n  this.state.humidity && <p className=\"weather__key\"> Humidity: \n    <span className=\"weather__value\"> { this.state.humidity } </span>\n  </p> \n}\n{ \t\n  this.state.description && <p className=\"weather__key\"> Conditions: \n    <span className=\"weather__value\"> { this.state.description } </span>\n</p> \n}\n{ \n  this.state.error && <p className=\"weather__error\">{ this.state.error }</p>  \n}\n\n          </div>\n  \n      </div>\n  \n      </div>\n  \n  \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport sample from './Lightning.mp4'\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}